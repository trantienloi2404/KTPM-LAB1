version: '3.8'

services:
  postgres_authenticate:
    image: postgres:latest
    environment:
      POSTGRES_DB: authenticate_db
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypass
    ports:
      - "5432:5432"
    volumes:
      - postgres_authenticate_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d authenticate_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  postgres_todo:
    image: postgres:latest
    environment:
      POSTGRES_DB: todo_db
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypass
    ports:
      - "5433:5432"
    volumes:
      - postgres_todo_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d todo_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  postgres_notification:
    image: postgres:latest
    environment:
      POSTGRES_DB: notification_db
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypass
    ports:
      - "5434:5432"
    volumes:
      - postgres_notification_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d notification_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  postgres_image:
    image: postgres:latest
    environment:
      POSTGRES_DB: image_db
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypass
    ports:
      - "5435:5432"
    volumes:
      - postgres_image_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d image_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  authenticate-service:
    build: ./authenticate-service-new
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=development
      - DATASOURCE_HOST=postgres_authenticate
      - DATASOURCE_PORT=5432
      - DATASOURCE_USERNAME=myuser
      - DATASOURCE_PASSWORD=mypass
      - DATASOURCE_DATABASE=authenticate_db
      - JWT_SECRET=jsdhfsbjdkf273hdgckasjgf823fjdbsc
    depends_on:
      postgres_authenticate:
        condition: service_healthy
    networks:
      - microservices-network

  todotask-service:
    build: ./todotask-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_todo:5432/todo_db
      - SPRING_DATASOURCE_USERNAME=myuser
      - SPRING_DATASOURCE_PASSWORD=mypass
      - SPRING_DATA_REDIS_HOST=redis
      - SERVER_PORT=8082
      - SPRING_CACHE_TYPE=NONE
    depends_on:
      postgres_todo:
        condition: service_healthy
      redis:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8082/api/todos?userId=1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    restart: unless-stopped
    networks:
      - microservices-network

  notification-service:
    build: ./notification-service
    ports:
      - "8083:8083"
    environment:
      - NODE_ENV=production
      - PORT=8083
      - DATABASE_URL=postgresql://myuser:mypass@postgres_notification:5432/notification_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_URL=http://authenticate-service:8081
      - TODO_SERVICE_URL=http://todotask-service:8082
      - IMAGE_SERVICE_URL=http://image-service:8084
    depends_on:
      postgres_notification:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microservices-network

  image-service:
    build: ./image-service
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - FIREBASE_DATABASE_URL=${FIREBASE_DATABASE_URL}
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080,http://localhost:3001
      - AUTH_SERVICE_URL=http://authenticate-service:8081
      - TODO_SERVICE_URL=http://todotask-service:8082
      - NOTIFICATION_SERVICE_URL=http://notification-service:8083
    volumes:
      - ./image-service/src:/app/src
      - /app/node_modules
      - image_uploads:/app/uploads
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microservices-network

  frontend:
    build: ./frontend
    ports:
      - "3001:80"
    environment:
      # No REACT_APP_API_URL - use nginx proxy (same origin)
      - REACT_APP_CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - REACT_APP_FIREBASE_AUTH_DOMAIN=${FIREBASE_AUTH_DOMAIN}
      - REACT_APP_FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - REACT_APP_FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET}
      - REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${FIREBASE_MESSAGING_SENDER_ID}
      - REACT_APP_FIREBASE_APP_ID=${FIREBASE_APP_ID}
    depends_on:
      - image-service
      - authenticate-service
      - todotask-service
      - notification-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres_authenticate_data:
  postgres_todo_data:
  postgres_notification_data:
  postgres_image_data:
  redis_data:
  image_uploads: